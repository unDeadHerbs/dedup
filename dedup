#! /usr/bin/env -S /bin/sh -c "exec \$(dirname \$(realpath "\$0"))/.virtualenv/bin/python -E "\$0" "\$@""
# Forgive the terrible shebang line, I didn't want to have to wrap this in a script, as the program is so short.
import os
import shutil
import hashlib
import argparse
import re
from tqdm import tqdm

def find_duplicates(folder,pat):
    # TODO: Maybe cache the hashes?  Rehashing files that haven't
    # changed is expensive and unhelpful.  The timestamps on the files
    # are maybe trustworthy, they're good enough for make.  I could
    # check the remembered hashes of file that are in duplicate
    # groups, this grantees no extra deletions.
    hash_map = {}
    duplicates = []

    patc = re.compile(pat)
    total_files = sum([1 for _, _, files in os.walk(folder) for f in files if patc.search(f)])
    pbar = tqdm(total=total_files, desc="Scanning  ", unit="file")
    
    for root, dirs, files in os.walk(folder):
        for file in files:
            file_path = os.path.join(root, file)
            if not patc.search(file_path): continue
            if os.path.isfile(file_path):
                with open(file_path, 'rb') as f:
                    file_hash = hashlib.sha256(f.read()).hexdigest()
                    if file_hash in hash_map:
                        duplicates[hash_map[file_hash]].append(file_path)
                    else:
                        hash_map[file_hash] = len(duplicates)
                        duplicates.append([file_path])
            pbar.update(1)
    pbar.close()
    return duplicates

def filter_files(file_list):
    # This function regularly modifies the list while iterating
    # through it.  This is safe here as the checks in the loop bodies
    # look at the updated state and the iterators moving though the
    # old list will never look at a deleted element.

    keep=file_list.copy()
    delete=[]
    new=[]
    considered=[]
    changed=False

    def sub_each(pat, sub, s):
        """Generate a list of all possible strings obtained from
        replacing the pattern with the substitution in the input
        string (non-recursive).

        """
        # TODO: Write some doc tests for this, I think it's wrong
        patc=re.compile(pat)
        matches=patc.finditer(s)
        generated=[]
        for match in matches:
            if type(sub)==type(''):
                r=s[:match.start()] + sub + s[match.end():]
            else:
                r=s[:match.start()] + sub(match) + s[match.end():]
            generated.append(r)
        return generated

    def remove(remover,path):
        if path in keep:
            keep.remove(path)
            delete.append((remover,path))
        if path in new:
            new.remove(path)
            considered.append((remover,path))

    def create(path):
        if path in keep+new: return True
        if os.path.exists(path):
            # Don't try to clobber files
            considered.append(('preexisting',path))
            # TODO: Also track names created
            return False
        new.append(path)
        nonlocal changed
        changed=True
        return True
    
    def pattern_filter(pat,sub):
        patc = re.compile(pat)
        for f in keep+new:
            if patc.search(f):
                names_without = sub_each(pat,sub,f)
                for n in names_without:
                    if n in keep+new:
                        remove(n,f)
                        break

    def rename_filter(pat,sub):
        patc = re.compile(pat)
        for f in keep+new:
            if patc.search(f):
                name_without = patc.sub(sub,f)
                if create(name_without):
                    remove(name_without,f)
    
    all_nums = re.compile('[-0-9_., ]*$')
    # TODO: This date filter will expire in 2030, use the actual date to build this check.
    date = re.compile('(19[7-9]|20[012])[0-9][-_](0[1-9]|1[012])[-_](0[1-9]|[12][0-9]|3[0-1])')
    space_like = re.compile('[-_ ]')

    changed=True
    while changed:
        changed = False
        # If two files have the same name but one contains a number, delete the one containing
        pattern_filter("[1-9][0-9]*",'')
        pattern_filter(" *[0-9]+",'')
        # If it contains a parenthesized number, remove that
        # TODO: This might damage real file names.  Add an exclusion
        #   list to this tool.  (It getting it wrong once is fine, since
        #   the file will just be renamed and documented.)
        rename_filter(" +[(][0-9]+[)]",'')
        rename_filter("(?<! )[(][0-9]+[)]",'')
        # Remove trailing spaces in file names.  That is "name .mp3" should become "name.mp3".
        rename_filter(' ([.][^.]*)$',lambda m:m.group(1))

        # If two files have the same name except for numbers, delete the larger number one (lexicographically later)
        for i in range(1,4):
            pattern_filter("[0-9]+",lambda n:str(int(n.group(0))-i))

        # If two files have the same name but one has less redundant spaces
        pattern_filter("  ",' ')

        # If one file has a name which is all numbers and another has one with text, delete the one with numbers
        for f in keep+new:
            base_name = ''.join(f.split('/')[-1].split('.')[:-1])
            if all_nums.match(base_name):
                for f2 in keep+new:
                    base_name2 = ''.join(f2.split('/')[-1].split('.')[:-1])
                    if not all_nums.match(base_name2):
                        remove(f2,f)
                        break
        # TODO: If a file has a "bad" name (e.g. "audio.mp3") don't keep it if there is a better named file.
    
        # If two have the same proper name but one is both in a sub directory and has an older date, remove newer
        for f in keep+new:
            base_name = ''.join(f.split('/')[-1].split('.')[:-1])
            path = ''.join(f.split('/')[:-1])
            if date.search(base_name):
                # Using a dummy token to check that the dates are in the same place in both.
                name_no_date = date.sub('YDYD',base_name)
                for f2 in keep+new:
                    if f==f2: continue # don't look at the same file
                    n2 = ''.join(f2.split('/')[-1].split('.')[:-1])
                    p2 = ''.join(f2.split('/')[:-1])
                    # sub or same directory
                    if p2.startswith(path):
                        nd2 = date.sub('YDYD',n2)
                        # same proper name
                        if name_no_date == nd2:
                            # is older or same
                            if n2 <= base_name:
                                remove(f2,f)
                                break
        # TODO: If two files have the same name but one has more actual spaces
        # If two files have the same name except one has a more specific path, keep the deeper one
        for f in keep+new:
            base_name = f.split('/')[-1]
            path = ''.join(f.split('/')[:-1])
            for f2 in keep+new:
                if f==f2: continue
                n2 = f2.split('/')[-1]
                p2 = ''.join(f2.split('/')[:-1])
                if base_name == n2 and p2.startswith(path):
                    remove(f2,f)
                    break
        # TODO: If two files have the same stripped name and the second is in an export folder under the first

        # if /path/date_1-name and /path/sub_path/date_2-name and date_2 is after date_1, move date_1 to the sub_path
        for f in keep+new:
            base_name = f.split('/')[-1]
            path = '/'.join(f.split('/')[:-1])
            if date.search(base_name):
                # Using a dummy token to check that the dates are in the same place in both.
                name_no_date = date.sub('YDYD',base_name)
                for f2 in keep+new:
                    if f==f2: continue # don't look at the same file
                    n2 = f2.split('/')[-1]
                    p2 = '/'.join(f2.split('/')[:-1])
                    # sub directory
                    if p2.startswith(path) and p2 != path:
                        nd2 = date.sub('YDYD',n2)
                        # same proper name
                        if name_no_date == nd2:
                            # if is newer
                            if n2 > base_name:
                                if p2+'/'+base_name not in (keep+delete+new):
                                    create(p2+'/'+base_name)
                                    break
        # If two files have the same base name (ignoring date and symbols) and one is in an export directory under the other, delete the non-export one
        # - we can safely discard the date because the export presumable knows the real date.
        for f in keep+new:
            base_name = f.split('/')[-1]
            path = '/'.join(f.split('/')[:-1])
            clean_name = space_like.sub('',date.sub('',base_name))
            if 'export' in path.lower(): continue
            for f2 in keep+new:
                if f==f2: continue # don't look at the same file
                n2 = f2.split('/')[-1]
                p2 = '/'.join(f2.split('/')[:-1])
                cn2 = space_like.sub('',date.sub('',n2))
                if clean_name == cn2 and p2.startswith(path) and 'export' in p2.lower():
                    remove(f2,f)
                    break
    return (keep,delete,new,considered)

def filter_groups(duplicates):
    count_dups = sum([len(d)>1 for d in duplicates])
    pbar = tqdm(total=count_dups, desc="Filtering ", unit="path")
    groups=[]
    for duplicate_group in duplicates:
        if len(duplicate_group)>1:
            keep, delete, new, considered = filter_files(duplicate_group)
            if len(keep+new) == 0:
                print("WARNING: tried to delete everything, skipping")
                #print("List of paths was:", )
                pbar.update(1)
                continue
            groups.append((keep,delete,new,considered))
            pbar.update(1)
    pbar.close()
    return groups

def manage_files(files):
    """Move, Delete, and Copy files to match the desired names and locations.

    Takes a list of paths in the format (to keep files, to delete files, to create files).
    """
    pbar=tqdm(total=len([1 for k,d,n,c in files if len(d+n)]), desc="Organizing", unit="path")
    for keep, delete, new, consider in files:
        if len(delete+new)==0: continue # nothing to do
        if len(keep+new)==0:
            print("Tried to delete everything")
            continue 
        if len(keep+delete)==0:
            print("New files asked for with no originals")
            for n in new:
                print("-",n)
            continue
        for del_path, new_path in zip(delete, new):
            if os.path.exists(del_path[1]) and os.path.exists(os.path.dirname(new_path)):
                shutil.move(del_path[1], new_path)
        for del_path in delete:
            if os.path.exists(del_path[1]):
                os.remove(del_path[1])
        template = (keep+new)[0]
        for new_path in new:
            if not os.path.exists(new_path):
                shutil.copyfile(template, new_path)
        pbar.update(1)
    pbar.close()
    
def main():
    parser = argparse.ArgumentParser(description='Find and intelligently delete duplicate files in a folder.')
    default_file_types = [
        'flac',
        'jpg',
        'm4a',
        'ogg',
        'opus',
        'png',
        'mp3',
    ]
    file_type_pat = '('+'|'.join(default_file_types)+')$'
    parser.add_argument('pattern', nargs='?', default=file_type_pat, help='only look at files containing the pattern')
    parser.add_argument('folder', nargs='?', default=os.getcwd(), help='folder to search for duplicates (default: current directory)')
    args = parser.parse_args()

    folder = args.folder
    pat = args.pattern
    duplicates = find_duplicates(folder,pat)
    groups = filter_groups(duplicates)
    manage_files(groups)

    # Change Log
    to_delete = []
    to_make = []
    considered = []
    for k,d,n,c in groups:
        to_delete.extend(d)
        t=(k+[dd[1] for dd in d])[0]
        to_make.extend([(t,nn) for nn in n])
        considered.extend(c)
    considered = [c for c in considered if c[0]!='preexisting']
    if len(to_make):
        print("Created",len(to_make),"file(s)")
        for f in to_make:
            print("-",f)
    if len(to_delete):
        print("Removed",len(to_delete),"file(s)")
        for f in to_delete:
            print("-",f)
    if len(considered):
        print("Considered",len(considered),"file(s)")
        for f in considered:
            print("-",f)

if __name__ == "__main__":
    main()
